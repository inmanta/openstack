"""
    Copyright 2013 KU Leuven Research and Development - iMinds - Distrinet

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Administrative Contact: dnet-project-office@cs.kuleuven.be
    Technical Contact: bart.vanbrabant@cs.kuleuven.be
"""

entity Controller extends openstack::Service:
    """
    The nova controler
    """
end
implement Controller using controller

Controller controller [0:1] -- [1] keystone::Keystone keystone
Controller controller [0:1] -- [1] glance::Glance glance
Controller controller [0:1] -- [1] neutron::NetworkController neutron

entity Compute extends ip::services::Client:
    """
    The nova compute engine
    """
end
implement Compute using kvmCompute

implementation controller for Controller:
    p_proxy = std::Package(host = host, name = "nova-ajax-console-proxy", state = "installed")
    p_api = std::Package(host = host, name = "nova-api", state = "installed")
    p_cert = std::Package(host = host, name = "nova-cert", state = "installed")
    p_consoleauth = std::Package(host = host, name = "nova-consoleauth", state = "installed")
    p_vncproxy = std::Package(host = host, name = "nova-novncproxy", state = "installed")
    p_scheduler = std::Package(host = host, name = "nova-scheduler", state = "installed")

    # config files
    f_nova = std::ConfigFile(host = host, path = "/etc/nova/nova.conf", content = template("openstack/nova.conf.tmpl"),
        requires = [p_api])
end

implementation kvmCompute for Compute:
    # packages
    p_kvm = std::Package(host = host, name = "nova-compute-kvm", state = "installed")
    p_compute = std::Package(host = host, name = "nova-compute", state = "installed", requires = p_kvm)
    p_conductor = std::Package(host = host, name = "nova-conductor", state = "installed")
    p_meta = std::Package(host = host, name = "nova-api-metadata", state = "installed")
    p_virt = std::Package(host = host, name = "libvirt-bin", state = "installed")

    # config files
    f_nova_compute = std::ConfigFile(host = host, path = "/etc/nova/nova-compute.conf", content = template("openstack/nova-compute.conf.tmpl"),
        requires = [p_compute])
    f_nova = std::ConfigFile(host = host, path = "/etc/nova/nova.conf", content = template("openstack/nova.conf-compute.tmpl"),
        requires = [p_compute])

    # services
    std::Service(host = host, name = "nova-compute", state = "running", onboot = true, requires = [p_compute, f_nova_compute, s_conductor])
    std::Service(host = host, name = "nova-api-metadata", state = "running", onboot = true, requires = p_meta)
    s_conductor = std::Service(host = host, name = "nova-conductor", state = "running", onboot = true, requires = p_conductor)
    std::Service(host = host, name = "libvirt-bin", state = "running", onboot = true, requires = p_virt)
end

Controller controller [1] -- [0:] Compute compute

