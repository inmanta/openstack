"""
    Copyright 2013 KU Leuven Research and Development - iMinds - Distrinet

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Administrative Contact: dnet-project-office@cs.kuleuven.be
    Technical Contact: bart.vanbrabant@cs.kuleuven.be
"""

"""
    Resources in the network API can be either up or down
"""
typedef net_state as string matching self == "up" or self == "down"

entity Network:
    """
        A network defined in an IaaS
    """
    net_state admin_state = "up"
    string name
    bool external = false
    bool shared = false
end
implement Network using std::none

"""
    A network is controlled by a project
"""
Network networks [0:] -- [1] Project project

entity Router:
    """
        A router in openstack
    """
    net_state admin_state = "up"
    string name
end
implement Router using std::none

"""
    A router is controlled by a project
"""
Router routers [0:] -- [1] Project project

entity Subnet:
    """
        A subnet of a network
    """
    string name
    ip::cidr cidr
    bool dhcp = true
    ip::ip gateway_ip
end
implement Subnet using std::none

"""
    A subnet is controlled by a project
"""
Subnet subnets [0:] -- [1] Project project

"""
    A subnet is part of a network
"""
Subnet subnets [0:] -- [1] Network network

"""
    Each router has a network that contains its external gateway
"""
Network gateway_network [0:1] -- [0:] Router gateway_routers

entity RouterInterface:
    """
        This entity defines a router interface in a subnet
    """
end
implement RouterInterface using std::none

"""
    An interface is defined in a subnet
"""



