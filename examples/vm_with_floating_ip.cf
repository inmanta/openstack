import ssh
import openstack

## Edit these parameters
image_id = ""  # UUID for the image to boot from
network_name = "" # name of the network to start the VM in
subnet_name = "" # name of the subnet to start the vm in
network_address = "10.1.2.0/24" # cidr for the subnet 

flavor_name = "" # name of the machine flavor to use
ssh_public_key="" # ssh public key to inject in the machine


uplink_network_name = "" # Name of the network where the floating ip needs to end up in

# change OS parameter to match the actual image. If an OS is not modelled in an existing module,
# std::linux can be used for example. However, other modules might not have support for a
# generic os definition such as std::linux
os = std::linux
## End edit

# register ssh key
ssh_key = ssh::Key(name="mykey", public_key=ssh_public_key)

# Define the OpenStack provider to use
# This represents the connection/credentials to use
provider = openstack::Provider(
    name="iaas_openstack",
    connection_url=std::get_env("OS_AUTH_URL"),
    username=std::get_env("OS_USERNAME"),
    password=std::get_env("OS_PASSWORD"),
    tenant=std::get_env("OS_PROJECT_NAME")
)

# Define the project/tenant to boot the VM in, but do not let inmanta manage it
# i.e. it has to exists already for deployment to work
project = openstack::Project(
    provider=provider,
    name=provider.tenant, # Use the same project as the login project for this user
    description="",
    enabled=true,
    managed=false,  # Don't manage
)

# Define the network objects to connect the virtual machine to but again, do not manage them
net = openstack::Network(
    provider=provider,
    project=project,
    name=network_name,
    managed=false
)
subnet = openstack::Subnet(
    provider=provider,
    project=project,
    network=net,
    dhcp=true,
    managed=false,
    name=subnet_name,
    network_address=network_address
)
uplink_network = openstack::Network(
    provider=provider,
    project=project,
    name=uplink_network_name,
    managed=false
)


# Define the virtual machine
host = openstack::Host(
    provider=provider,
    project=project,
    key_pair=ssh_key,  # ssh key used to connect to the VM
    name="testhost",
    image=image_id, 
    os=os,
    flavor=flavor_name,
    user_data="",     # cloud init user data
    subnet=subnet
)


fip = openstack::FloatingIP(
    provider=provider, 
    project=project,
    external_network=uplink_network,
    port=host.vm.eth0_port, # attach the FIP to the eth0 of the VM of this host
)

public_ip = std::getfact(fip, "ip_address")

# This will not print an IP before the VM is created
# Once the VM is created and the facts known, it will print the ip
std::print("actual ip {{host.ip}}")
std::print("public ip {{public_ip}}")